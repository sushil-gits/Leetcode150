Stepwise Approach:
1. Initialize Variables
maxsum = INT_MIN: Stores the maximum subarray sum found so far.
currsum = 0: Stores the current subarray sum.
2. Iterate Through the Array
Loop through each element nums[i] and update currsum.
3. Update currsum
Add nums[i] to currsum:
currsum += nums[i];
If currsum exceeds maxsum, update maxsum:
if (currsum > maxsum)
    maxsum = currsum;
If currsum becomes negative, reset it to 0:
if (currsum < 0)
    currsum = 0;
This is because a negative currsum will only decrease the sum of the future subarray.
4. Return the Maximum Sum
Finally, return maxsum, which stores the largest contiguous subarray sum.
Dry Run Example
Input:
nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4}
i	nums[i]	currsum (Running Sum)	maxsum (Max Found So Far)
0	-2	-2	-2
1	1	1	1
2	-3	-2 (reset to 0)	1
3	4	4	4
4	-1	3	4
5	2	5	5
6	1	6	6
7	-5	1	6
8	4	5	6
Output:
maxsum = 6 (Subarray: [4, -1, 2, 1])

Time Complexity Analysis
Time Complexity: O(N) (single pass through nums)
Space Complexity: O(1) (constant extra space)
Conclusion
Kadaneâ€™s Algorithm is an optimal solution for the Maximum Subarray Sum problem.
It efficiently finds the best contiguous subarray using a single loop.
The key idea is to reset the sum if it becomes negative because negative sums will decrease future subarrays. ðŸš€


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
       int maxsum=INT_MIN;
       int currsum=0;
       for(int i=0;i<nums.size();i++)
       {
        currsum+=nums[i];
        if(currsum>maxsum)
        maxsum=currsum;
        if(currsum<0)
        currsum=0;
       }
       return maxsum;
    }
};
