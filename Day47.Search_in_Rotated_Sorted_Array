Stepwise Approach for Searching in a Rotated Sorted Array
This is an optimized binary search approach to find a target element in a rotated sorted array.

Understanding the Problem
Given a rotated sorted array (nums[]).
We need to find the index of target, or return -1 if not found.
The array is sorted but has been rotated at some pivot (e.g., [4,5,6,7,0,1,2]).
Stepwise Approach
Step 1: Initialize Search Space
l = 0 → Left pointer (starting index).
r = nums.size()-1 → Right pointer (ending index).
Step 2: Perform Binary Search
Loop Condition:
Run a while(l <= r) loop to perform binary search.

Step 2.1: Calculate mid Index
Find the middle index using:

𝑚
𝑖
𝑑
=
𝑙
+
(
𝑟
−
𝑙
)
2
mid=l+ 
2
(r−l)
​
 
This avoids integer overflow in large numbers.

Step 2.2: Check if nums[mid] == target
If nums[mid] == target, return mid (we found the target).
Step 3: Determine Which Half is Sorted
Since the array is rotated, one half will always be sorted.

Step 3.1: Left Half is Sorted (nums[mid] >= nums[l])
If nums[mid] >= nums[l], it means the left portion is sorted.
Now, check if target is within this range:
If nums[l] <= target <= nums[mid], search in the left half → r = mid - 1.
Else, search in the right half → l = mid + 1.
Step 3.2: Right Half is Sorted (nums[mid] < nums[l])
Else, the right portion is sorted.
Now, check if target is within this range:
If nums[mid] <= target <= nums[r], search in the right half → l = mid + 1.
Else, search in the left half → r = mid - 1.
Step 4: Return -1 if Not Found
If we exit the loop, it means the target is not in the array.
Return -1.
Time Complexity
O(log N) → Since we are halving the search space in every iteration.
Space Complexity
O(1) → No extra space is used.
Example Walkthrough
Example 1
nums = [4,5,6,7,0,1,2], target = 0
Iterations:
l	r	mid	nums[mid]	Sorted Half	Action
0	6	3	7	Left sorted	Move l right (target in right half)
4	6	5	1	Left sorted	Move r left (target in left half)
4	4	4	0	Found	Return 4
Example 2
nums = [4,5,6,7,0,1,2], target = 3
After searching, we exit the loop and return -1 (since 3 is not in the array).
Final Summary
Step	Action
1	Initialize l = 0, r = nums.size() - 1
2	Perform binary search (while l <= r)
3	Compute mid = l + (r-l)/2
4	If nums[mid] == target, return mid
5	Check which half is sorted
6	Adjust l or r based on the sorted half
7	If loop exits, return -1


class Solution {
public:
    int search(vector<int>& nums, int target) {
        // for(int i=0;i<nums.size();i++)
        // {
        //     if(nums[i]==target)
        //     return i;
        // }
        // return -1;

         int l =0;
        int r =nums.size()-1;
        while(l<=r){
            int mid = l + (r-l)/2;
            if(nums[mid]== target){
                return mid;
            }else if(nums[mid]>=nums[l]){
                if(nums[l]<=target && target<=nums[mid]){
                    r = mid-1;
                }else{
                    l = mid+1;
                }
            }
            else{
                if(nums[mid]<=target && target<=nums[r]){
                   l = mid+1;
                }else{
                    r = mid-1;
                }
            }
        }
        return -1;
    }
};
