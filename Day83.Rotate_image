Stepwise Approach:
Step 1: Understanding the Problem Statement
Given an n x n square matrix.

Rotate the matrix 90 degrees clockwise in-place (without using extra space).

Step 2: Breakdown of the Rotation Logic
Step 2.1: Transpose the Matrix
The first for loop swaps matrix[row][col] with matrix[col][row] for all elements above the diagonal.

This effectively transposes the matrix (rows become columns, and columns become rows).

Implementation Details:
Iterate over all rows row from 0 to n-1.

Iterate over all columns col from 0 to n-1.

Swap only when row < col (i.e., upper triangular elements).

Example of Transposition:
Before Transpose:
1  2  3
4  5  6
7  8  9

After Transpose:
1  4  7
2  5  8
3  6  9
Step 2.2: Reverse Each Row
After transposing, each row is reversed to get the 90-degree rotated matrix.

Swap the first and last elements in each row, then the second and second-last, and so on.

This is done by iterating until the middle column (middle = n/2).

Example of Row Reversal:
Before Row Reversal:
1  4  7
2  5  8
3  6  9

After Row Reversal:
7  4  1
8  5  2
9  6  3
This is the final 90-degree rotated matrix.

Step 3: Code Walkthrough
void rotate(vector<vector<int>>& matrix) {
    int n = matrix.size();
    
    // Step 1: Transpose the matrix
    for(int row = 0; row < n; row++) {
        for(int col = 0; col < n; col++) {
            if(row >= col) continue; // Only swap elements above the diagonal
            else {
                int tmp = matrix[row][col];
                matrix[row][col] = matrix[col][row];
                matrix[col][row] = tmp;
            }
        }
    }

    // Step 2: Reverse each row
    int middle = n / 2;
    for(int row = 0; row < n; row++) {
        for(int col = 0; col < middle; col++) {
            int tmp = matrix[row][col];
            matrix[row][col] = matrix[row][n-1-col];
            matrix[row][n-1-col] = tmp;
        }
    }
}
Time Complexity Analysis
Transpose Step: 
𝑂
(
𝑛
2
)
O(n 
2
 ) (swapping upper triangle elements)

Row Reversal Step: 
𝑂
(
𝑛
2
)
O(n 
2
 ) (swapping half elements in each row)

Total Complexity: 
𝑂
(
𝑛
2
)
O(n 
2
 ), which is optimal for in-place matrix rotation.

Final Thoughts
This method modifies the matrix in-place without using extra space.

The transpose + row reversal technique is a common approach for rotating a matrix by 90 degrees clockwise efficiently. 🚀


class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        //i is rows, j is cols
        for(int row =0;row<n;row++){
            for(int col = 0;col<n;col++){
                if(row>=col) continue;
                else{
                    int tmp = matrix[row][col];
                    matrix[row][col]=matrix[col][row];
                    matrix[col][row] = tmp;
                }
            }
        }
        int middle = n/2;
        for(int row =0;row<n;row++){
            for(int col = 0;col<middle;col++){
                int tmp = matrix[row][col];
                matrix[row][col] = matrix[row][n-1-col];
                matrix[row][n-1-col] = tmp;
            }
        }
    }
};
