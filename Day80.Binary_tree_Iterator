Stepwise Approach for BSTIterator Class
This class implements an iterator for a Binary Search Tree (BST) using an in-order traversal approach with a stack-based iterative method.

Understanding the Problem
We need to implement an iterator for a BST that returns elements in ascending order.

The iterator should support:

next() â†’ Returns the next smallest element.
hasNext() â†’ Checks if more elements are available.
The solution uses a stack to store nodes and a helper function pushall(TreeNode* node) to push left children.

Stepwise Breakdown of the Code
Step 1: Define the Stack
We use a stack st to store the leftmost path of the tree.
This helps in efficiently retrieving the next smallest element.
stack<TreeNode*> st;
Step 2: Helper Function to Push Left Children (pushall(TreeNode* node))
This function pushes all left children of a subtree into the stack.
This ensures the leftmost (smallest) element is at the top of the stack.
void pushall(TreeNode* node) {
    while (node) {
        st.push(node);  // Push current node
        node = node->left; // Move to left child
    }
}
ðŸ”¹ Why do we push only left nodes?

In an in-order traversal (Left â†’ Root â†’ Right), the smallest elements appear first.
By pushing all left children, the smallest value remains on top of the stack.
Step 3: Constructor (BSTIterator(TreeNode* root))
The constructor initializes the iterator by pushing the leftmost path from the root.
BSTIterator(TreeNode* root) {
    pushall(root); // Push all left children of the root
}
ðŸ”¹ At this point, the stack contains the leftmost nodes of the BST.

Step 4: Implement next() Function
next() retrieves the topmost element from the stack.
Steps:
Pop the topmost node (smallest value).
Call pushall(temp->right), pushing left children of the right subtree.
int next() {
    TreeNode* temp = st.top(); // Get topmost (smallest) node
    st.pop(); // Remove it from stack
    pushall(temp->right); // Process right subtree
    return temp->val; // Return node value
}
ðŸ”¹ Why do we push temp->right?

The right subtree may contain larger values, so we process its leftmost path.
Step 5: Implement hasNext() Function
Returns true if there are more elements in the BST.
Simply checks if the stack is empty.
bool hasNext() {
    return !st.empty();
}
Dry Run Example
Input:
     7
    / \
   3   15
      /  \
     9    20
BSTIterator iterator(root);
Initial Stack State (pushall(root))
Stack (Top â†’ Bottom)
3
7
Operation 1: iterator.next()
Stack before popping: {3, 7}
Popped element: 3
Return value: 3
Push 3->right (None) â†’ Stack remains {7}
Operation 2: iterator.next()
Stack before popping: {7}
Popped element: 7
Return value: 7
Push 7->right (15) â†’ pushall(15)
New stack: {9, 15}
Operation 3: iterator.next()
Stack before popping: {9, 15}
Popped element: 9
Return value: 9
Push 9->right (None) â†’ Stack remains {15}
Operation 4: iterator.next()
Stack before popping: {15}
Popped element: 15
Return value: 15
Push 15->right (20) â†’ pushall(20)
New stack: {20}
Operation 5: iterator.next()
Stack before popping: {20}
Popped element: 20
Return value: 20
Push 20->right (None) â†’ Stack becomes {} (Empty)
Operation 6: iterator.hasNext()
Stack is empty â†’ Returns false.
Time & Space Complexity
âœ… Time Complexity:

next() â†’ O(1) average (each node is processed once).
hasNext() â†’ O(1) (just checking stack).
âœ… Space Complexity:

O(H) (height of the tree) for the stack storage.
In a balanced BST, H = O(log N), making it efficient.
Key Takeaways
Efficient in-order traversal using a stack.
Optimized space (O(H)) compared to O(N) recursion.
Supports dynamic traversal (does not store all elements beforehand).

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
public:
stack<TreeNode*>st;
void pushall(TreeNode*node)
{
    while(node)
    {
        st.push(node);
        node=node->left;
    }
}
    BSTIterator(TreeNode* root) {
       pushall(root); 
    }
    
    int next() {
        TreeNode*temp=st.top();
        st.pop();
        pushall(temp->right);
        return temp->val;
    }
    
    bool hasNext() {
        return !st.empty();
        
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
