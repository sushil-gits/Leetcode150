Stepwise Approach:
Function isSymmetric:

This function is the entry point.
It calls the helper function solve with root->left and root->right as arguments.
If solve returns true, the tree is symmetric; otherwise, it is not.
Function solve (Recursive Symmetry Check):

Step 1: Base Case - If both leftptr and rightptr are NULL, return true.
Reason: If both subtrees are empty, they are symmetric.

Step 2: If either leftptr or rightptr is NULL (but not both), return false.
Reason: If one subtree is missing while the other exists, symmetry is broken.

Step 3: Check the value of leftptr and rightptr. If they are not equal, return false.
Reason: The corresponding nodes in a symmetric tree must have the same value.

Step 4: Recursively check for symmetry in the subtrees:

Call solve(leftptr->left, rightptr->right) → Checks if the left subtree of leftptr is symmetric with the right subtree of rightptr.
Call solve(leftptr->right, rightptr->left) → Checks if the right subtree of leftptr is symmetric with the left subtree of rightptr.
Return true only if both recursive calls return true.
Final Decision:

If all recursive calls return true, the tree is symmetric.
If any call returns false, the tree is asymmetric.
Time Complexity:
O(N) where N is the number of nodes in the tree. Each node is visited once.
Space Complexity:
O(H) where H is the height of the tree (for recursion stack). In the worst case (skewed tree), it is O(N), and in the best case (balanced tree), it is O(log N).



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
bool solve(TreeNode *leftptr,TreeNode *rightptr)
{
    if(leftptr==NULL && rightptr==NULL)
    return true;
    if(leftptr==NULL||rightptr==NULL)
    return false;
    return ((leftptr->val==rightptr->val)&&solve(leftptr->left,rightptr->right)&&solve(leftptr->right,rightptr->left));
}
    bool isSymmetric(TreeNode* root) {
        return solve(root->left,root->right);
    }
};
