Stepwise Approach for Finding the Kth Largest Element in an Array
The function findKthLargest() returns the kth largest element from an array.
It uses a Max-Heap (priority queue) to efficiently determine the answer.

Stepwise Explanation (Using Max-Heap)
Step 1: Define the Function Signature
int findKthLargest(vector<int>& nums, int k)
The function takes:
nums: A vector of integers.
k: The position of the largest element to find.
Returns the kth largest element.
Step 2: Create a Max-Heap (Priority Queue)
priority_queue<int> q;
Max-Heap stores elements in decreasing order (largest element at the top).
By default, priority_queue<int> in C++ is a Max-Heap.
Step 3: Insert All Elements into the Max-Heap
for (int i = 0; i < nums.size(); i++) {
    q.push(nums[i]); // Insert all elements into the heap
}
Push all elements from nums into the max-heap.
This ensures the largest element is always at the top.
Step 4: Remove the Top Element (k-1) Times
for(int i = 1; i < k; i++) {
    q.pop(); // Remove the largest element (k-1) times
}
Since the heap is in decreasing order:
1st pop removes the largest element.
2nd pop removes the 2nd largest.
â€¦ (k-1) pops bring the kth largest element to the top.
Step 5: Return the Kth Largest Element
return q.top();
After removing (k-1) elements, the top() of the heap is the kth largest element.
Time Complexity Analysis
Building the Heap: O(N log N) (each insertion is O(log N))
Removing k-1 Elements: O(k log N)
Overall Complexity:

O(N log N) (Heap construction dominates for large N)
Alternative: Sorting Approach (Brute Force)
The commented-out brute force approach is:
sort(nums.rbegin(), nums.rend());
return nums[k-1];
Sorting Complexity: O(N log N)
Retrieving kth Largest Element: O(1)
ðŸ”¹ Sorting is simpler but less efficient than a heap when k is small.

Example Execution
Input:
vector<int> nums = {3, 2, 3, 1, 2, 4, 5, 5, 6};
int k = 4;
Heap at Different Stages
Operation	Heap (Max-Heap)
Insert {3}	{3}
Insert {2}	{3, 2}
Insert {3}	{3, 2, 3}
Insert {1}	{3, 2, 3, 1}
Insert {2}	{3, 2, 3, 1, 2}
Insert {4}	{4, 3, 3, 1, 2, 2}
Insert {5}	{5, 4, 3, 3, 2, 2, 1}
Insert {5}	{5, 5, 3, 4, 2, 2, 1, 3}
Insert {6}	{6, 5, 5, 4, 3, 2, 1, 3, 2}
Popping (k-1 = 3 times)
Pop {6} â†’ {5, 5, 3, 4, 3, 2, 1, 3, 2}
Pop {5} â†’ {5, 4, 3, 3, 3, 2, 1, 2}
Pop {5} â†’ {4, 3, 3, 2, 3, 2, 1}
Kth Largest Element (Top of Heap)
Answer: 4

Final Thoughts
Heap approach: âœ… Efficient for large N (O(N log N))
Sorting approach: âœ… Simple but slower for large N (O(N log N))
If k is small, Min-Heap of size k can be an even better approach (O(N log k)).

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        // using priority queue
        priority_queue<int> q;
        for (int i = 0; i < nums.size(); i++) {
            q.push(nums[i]);
        }
        for(int i = 1; i < k; i++) {
            q.pop();
        }
        return q.top();

        // brutt force approach
        // int ans=-1;
        // sort(nums.rbegin(),nums.rend());
        // for(int i=0;i<k;i++)
        // {
        //   ans=nums[i];
        // }
        // return ans;
        
    }
};
