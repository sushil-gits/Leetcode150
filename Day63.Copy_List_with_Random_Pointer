Stepwise Approach for Copying a Linked List with Random Pointers
The given function copies a linked list where each node has a random pointer using a hash map-based approach. Below is the step-by-step breakdown:

Step 1: Handle Edge Case
If head is NULL, return NULL immediately.
Step 2: Create a Hash Map
Use an unordered_map to store the mapping between the original nodes and their corresponding newly created nodes.
The key is the original node, and the value is the newly allocated node.
unordered_map<Node*, Node*> map;
Step 3: First Pass â€“ Create Cloned Nodes
Traverse the original list.
For each node, create a new node with the same value and store it in the map.
The new node initially has NULL for next and random.
Node* temp = head;
while(temp) {
    map[temp] = new Node(temp->val);
    temp = temp->next;
}
Step 4: Second Pass â€“ Assign next and random Pointers
Iterate again through the original list.
Using the hash map, set the next and random pointers for the newly created nodes.
temp = head;
while(temp) {
    map[temp]->next = map[temp->next];      // Assign next pointer
    map[temp]->random = map[temp->random];  // Assign random pointer
    temp = temp->next;
}
Step 5: Return the Head of the Cloned List
The new listâ€™s head is stored in map[head], so return it.
return map[head];
Time & Space Complexity Analysis
Time Complexity: O(N) (We traverse the list twice)
Space Complexity: O(N) (Hash map stores N nodes)
Example Walkthrough
Input Linked List:
1 -> 2 -> 3 -> 4
With random pointers:

1 â†’ (random â†’ 3)
2 â†’ (random â†’ 1)
3 â†’ (random â†’ 4)
4 â†’ (random â†’ 2)
Processing:
First pass: Create a mapping of original to copied nodes.
Second pass: Assign next and random pointers based on mapping.
Output Linked List:
A deep copy with the same structure but independent nodes.

Alternative Optimized Approach (O(1) Space)
If you want an O(1) space solution, we can use node interleaving (without an extra hash map). Let me know if you need this optimized approach! ðŸš€



/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head)
        return NULL;
        unordered_map<Node*,Node*>map;
        Node* temp=head;
        while(temp)
        {
            map[temp]=new Node(temp->val);
            temp=temp->next;
        }
        temp=head;
        while(temp)
        {
            map[temp]->next=map[temp->next];
            map[temp]->random=map[temp->random];
            temp=temp->next;
        }
        return map[head];
    }
};
