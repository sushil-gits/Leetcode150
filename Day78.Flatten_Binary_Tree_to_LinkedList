Understanding the Problem
We need to transform a binary tree into a linked list using right pointers only.
The linked list should follow preorder traversal order (root → left → right).
Stepwise Breakdown of the Code
TreeNode* prev = nullptr;  // Global pointer to track previous node

void flatten(TreeNode* root) {
    if(root == nullptr) return;  // Base case: If root is null, return

    flatten(root->right); // Recursively flatten the right subtree
    flatten(root->left);  // Recursively flatten the left subtree

    root->right = prev;   // Connect the current node’s right to the previously processed node
    root->left = nullptr; // Set left child to null (since it's a linked list)
    prev = root;          // Move the prev pointer to the current node
}
Step-by-Step Execution
Example Binary Tree
       1
      / \
     2   5
    / \   \
   3   4   6
Reverse Postorder Traversal (Right → Left → Root)
We process nodes in the following order: 6 → 5 → 4 → 3 → 2 → 1

Process Node 6:

flatten(6->right) → nullptr (Base case)
flatten(6->left) → nullptr
root->right = prev (prev is nullptr)
root->left = nullptr
prev = 6
Process Node 5:

flatten(5->right) → Already processed (6)
flatten(5->left) → nullptr
root->right = prev (prev = 6)
root->left = nullptr
prev = 5
Process Node 4:

root->right = prev (prev = 5)
prev = 4
Process Node 3:

root->right = prev (prev = 4)
prev = 3
Process Node 2:

root->right = prev (prev = 3)
prev = 2
Process Node 1:

root->right = prev (prev = 2)
prev = 1
Final Flattened Tree (Linked List)
1 -> 2 -> 3 -> 4 -> 5 -> 6 -> nullptr
Each node’s left pointer is null, and the right pointer points to the next node in preorder.

Time & Space Complexity
Time Complexity: O(n) (Each node is visited once)
Space Complexity: O(h) (Recursive call stack, where h is the tree height)
Alternative Iterative Approach (O(1) Space)
If we want O(1) extra space, we can use Morris Traversal:
void flatten(TreeNode* root) {
    TreeNode* curr = root;
    while (curr) {
        if (curr->left) {
            TreeNode* pre = curr->left;
            while (pre->right) pre = pre->right;
            pre->right = curr->right;
            curr->right = curr->left;
            curr->left = nullptr;
        }
        curr = curr->right;
    }
}
No recursion → O(1) space
Uses Morris traversal to find the rightmost node of left subtree
Key Takeaways
Reverse postorder traversal (right → left → root) maintains prev pointer for in-place modification.
Recursive method uses O(h) space, while Morris traversal (iterative method) achieves O(1) space.
The final linked list follows preorder traversal of the original tree.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode* prev = nullptr;
    void flatten(TreeNode* root) {
         if(root == nullptr) return;
        flatten(root->right);
        flatten(root->left);
        root->right = prev;
        root->left = nullptr;
        prev = root;
    }
};
