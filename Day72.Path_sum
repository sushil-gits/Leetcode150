Stepwise Approach for hasPathSum Function
This function checks if a root-to-leaf path exists in a binary tree such that the sum of node values along the path equals targetSum.

Step 1: Understand the Problem Statement
Given a binary tree and an integer targetSum, check if there exists a root-to-leaf path where the sum of node values along the path equals targetSum.
A leaf node is a node that has no left or right children.
If such a path exists, return true; otherwise, return false.
Step 2: Base Cases (Handle Edge Cases)
Case 1: If the tree is empty (root == NULL)
There is no path in an empty tree, so return false.
if (!root)
    return false;
Case 2: If the current node is a leaf (root->left == NULL && root->right == NULL)
A leaf node is reached, check if the remaining targetSum equals the node's value:
If targetSum == root->val, return true (valid path found).
Otherwise, return false (invalid path).
if (!root->left && !root->right)
    return targetSum == root->val;
Step 3: Recursive Traversal (Check Left and Right Subtrees)
Subtract the current node’s value from targetSum (targetSum - root->val).
Recursively check the left and right subtrees if any valid path exists
bool left_sum = hasPathSum(root->left, targetSum - root->val);
bool right_sum = hasPathSum(root->right, targetSum - root->val);
This ensures that the remaining sum is checked in child nodes.
Step 4: Return True If Either Left or Right Path Exists
If any one of the subtrees (left_sum or right_sum) returns true, return true.
return left_sum || right_sum;
This means that a valid root-to-leaf path exists.
Step 5: Summary of the Algorithm
Base Case 1: If root == NULL, return false (no path exists).
Base Case 2: If the current node is a leaf, check if targetSum == root->val:
If true, return true.
If false, return false.
Recursive Step:
Recursively call hasPathSum on left and right subtrees with targetSum - root->val.
Return True If Any Subtree Returns True:
If either the left or right subtree has a valid path, return true.
Time & Space Complexity
✅ Time Complexity: 
𝑂
(
𝑁
)
O(N)

Each node is visited once, leading to O(N) complexity, where N is the number of nodes.
✅ Space Complexity: 
𝑂
(
𝐻
)
O(H)

The recursion depth is at most the height of the tree (H).
Best Case (Balanced Tree): O(log N)
Worst Case (Skewed Tree): O(N)
Example Walkthrough
Example 1
Input Tree:
      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
Target Sum: 22

Path Exist?

5 → 4 → 11 → 2 gives sum 22. ✅ Return True
Example 2
Input Tree:

    1
   / \
  2   3
Target Sum: 5

Path Exist?

1 → 2 = 3
1 → 3 = 4
No valid path exists. ❌ Return False

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int targetSum) {
        if(!root)
        return false;
        if(!root->left && !root->right)
        return targetSum==root->val;

        bool left_sum=hasPathSum(root->left,targetSum-root->val);
        bool right_sum=hasPathSum(root->right,targetSum-root->val);
        return left_sum||right_sum;
    }
};
