Stepwise Approach for countNodes(TreeNode* root)
This function counts the total number of nodes in a binary tree using recursion. The approach is based on the idea of tree traversal.

1. Understanding the Function:
Base Case: If the root is NULL, return 0 (since an empty tree has no nodes).
Recursive Case:
Count the current node (+1).
Recursively count the nodes in the left subtree.
Recursively count the nodes in the right subtree.
Return Value: The sum of the current node count (1), left subtree count, and right subtree count.
2. Stepwise Breakdown
Step 1: Base Case Handling
if (!root)  
    return 0;
If the tree is empty (root == NULL), return 0.
Step 2: Recursively Count Nodes
return 1 + countNodes(root->left) + countNodes(root->right);
1 represents the current node.
countNodes(root->left) counts nodes in the left subtree.
countNodes(root->right) counts nodes in the right subtree.
The function sums all these values to get the total count.
3. Code Implementation
int countNodes(TreeNode* root) {
    // Base Case: If the tree is empty, return 0
    if (!root)
        return 0;
    
    // Recursive Call: Count the current node + left subtree + right subtree
    return 1 + countNodes(root->left) + countNodes(root->right);
}
4. Time Complexity Analysis
This function visits each node exactly once, making O(N) recursive calls, where N is the total number of nodes in the tree.
Time Complexity: O(N).
5. Space Complexity Analysis
Recursive Stack Space: The maximum depth of recursion is O(H), where H is the height of the tree.
Worst Case (Skewed Tree): H = N, so space complexity is O(N).
Best Case (Balanced Tree): H = logâ‚‚(N), so space complexity is O(log N).
6. Example Walkthrough
Example 1 (Full Binary Tree)
Input:
        1
       / \
      2   3
     / \  / \
    4  5 6  7

Output: 7
Explanation: There are 7 nodes in the tree.
Example 2 (Skewed Tree)
Input:
        1
       /
      2
     /
    3
   /
  4

Output: 4
Explanation: There are 4 nodes in the tree.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
       if(!root)
       return 0;
       return 1+countNodes(root->left)+countNodes(root->right); 
    }
};
