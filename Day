Approach: Reverse Bits of a 32-bit Unsigned Integer
The goal of this function is to reverse the bits of a given 32-bit unsigned integer.

Step-by-Step Explanation
1. Initialize Answer Variable
We initialize ans to store the reversed bits:
uint32_t ans = 0;
2. Iterate Through All 32 Bits
We use a loop that runs 32 times (since n is a 32-bit integer):
for (int i = 0; i < 32; i++) {
At each step, we extract the least significant bit (LSB) from n and add it to ans while shifting.

3. Left Shift ans to Make Space
Before adding a new bit, we shift ans left by one position:
ans <<= 1;
This ensures that the bits are reversed when we extract them from n.

4. Extract the Last Bit of n and Add It to ans
We extract the LSB of n using:
ans |= (n & 1);
n & 1 gives the last bit of n (either 0 or 1).
We use bitwise OR (|=) to add it to ans.
5. Right Shift n to Process Next Bit
n >>= 1;
This moves n one bit to the right, discarding the last bit.
The next bit of n becomes the new LSB.
6. Return the Reversed Number
After processing all 32 bits, ans contains the reversed bits, so we return it:
return ans;



class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
       uint32_t ans=0;
       for(int i=0;i<32;i++)
       {
         ans<<=1;
         ans|=(n&1);
         n>>=1;
       } 
       return ans;
    }
};
