Invert a Binary Tree – Stepwise Explanation
This function inverts a binary tree by swapping the left and right children recursively.

Understanding the Problem
The problem requires us to flip the binary tree, meaning:

The left subtree becomes the right subtree.
The right subtree becomes the left subtree.
For example:

Before Inversion
       4
      / \
     2   7
    / \  / \
   1   3 6  9
After Inversion
       4
      / \
     7   2
    / \  / \
   9   6 3  1
Stepwise Approach
Base Case:

If root == NULL, return NULL. (This means we've reached a leaf node and there's nothing to swap.)
Recursive Calls:

Recursively call invertTree(root->left).
Recursively call invertTree(root->right).
Swapping Process:

Swap the left and right children of root.
Return the root node after swapping.

Code Walkthrough
Let's consider a sample tree:
    1
   / \
  2   3
First Call (invertTree(1))
Calls invertTree(2)
Calls invertTree(3)
Swaps left and right → 1's left = 3, right = 2
Recursive Calls
invertTree(2) → No left or right, returns 2
invertTree(3) → No left or right, returns 3
The tree is now:
    1
   / \
  3   2
Time & Space Complexity
Time Complexity: O(n), since we visit each node exactly once.
Space Complexity: O(h), where h is the height of the tree (for recursive stack).

**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
         if(root == NULL){
            return root;
        }
        // Call the function recursively for the left subtree...
        invertTree(root->left);
        // Call the function recursively for the right subtree...
        invertTree(root->right);
        // swapping process...
        TreeNode* curr = root->left;
        root->left = root->right;
        root->right = curr;
        return root;        // Return the root...
    }
};
