Stepwise Approach for deleteDuplicates Function
This function removes all nodes that have duplicate numbers, leaving only distinct numbers in a sorted linked list.

Understanding the Code
ðŸ”¹ Given:
A sorted linked list where duplicate nodes appear consecutively.
We need to remove all occurrences of duplicate numbers.
ðŸ”¹ Approach Used:
Dummy Node Technique to simplify head removal cases.
Two Pointers (prev and head) to track nodes and modify the list.
Stepwise Breakdown
Step 1: Initialize the Dummy Node
ListNode dummy(0, head);
ListNode *prev = &dummy;
A dummy node (dummy) is created with value 0 and next pointing to head.
prev is a pointer to dummy, helping us modify the list without losing reference.
Step 2: Iterate Through the List
while (head) {
Traverse the list until head reaches nullptr (end of list).
Step 3: Skip Consecutive Duplicates
while (head->next && head->val == head->next->val)
    head = head->next;
If head->val == head->next->val, it means duplicates exist.
Keep moving head forward until we reach a different value.
Step 4: Check If head Was Moved
if (prev->next == head)
    prev = prev->next;
else
    prev->next = head->next;
If prev->next == head, it means head was not a duplicate â†’ move prev forward.
Else, head was a duplicate â†’ update prev->next to head->next, skipping duplicates.
Step 5: Move head Forward
head = head->next;
Continue to the next node.
Step 6: Return the Modified List
return dummy.next;
Return dummy.next (new head of the modified list).
Time & Space Complexity
Time Complexity: O(n), as we traverse the list once.
Space Complexity: O(1), since we modify the list in place.
Example Walkthrough
Input:
1 â†’ 2 â†’ 3 â†’ 3 â†’ 4 â†’ 4 â†’ 5
Execution:
head	prev	Action
1 â†’ 2 â†’ 3 â†’ 3 â†’ 4 â†’ 4 â†’ 5	dummy	Move prev
2 â†’ 3 â†’ 3 â†’ 4 â†’ 4 â†’ 5	prev = 2	Move prev
3 â†’ 3 â†’ 4 â†’ 4 â†’ 5	prev = 2	Skip 3s
4 â†’ 4 â†’ 5	prev = 2	Skip 4s
5	prev = 2	Move prev
nullptr	Return modified list	
Output:
1 â†’ 2 â†’ 5


  class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        ListNode dummy(0,head);
        ListNode *prev=&dummy;
        while(head)
        {
            while(head->next && head->val==head->next->val)
            head=head->next;
            if(prev->next==head)
            prev=prev->next;
            else
            prev->next=head->next;
            head=head->next;
        }
        return dummy.next;
    }
};
