Stepwise Approach for Spiral Matrix Traversal
Step 1: Handle Edge Case
Check if the given matrix is empty or has an empty row.

If empty, return an empty result vector.
if (matrix.empty() || matrix[0].empty()) return result;
Step 2: Initialize Boundaries
Define four boundaries:

top → Starts from the first row (0).

bottom → Last row (matrix.size() - 1).

left → Starts from the first column (0).

right → Last column (matrix[0].size() - 1).
int top = 0, left = 0;
int bottom = matrix.size() - 1;
int right = matrix[0].size() - 1;
Step 3: Loop Until All Elements Are Traversed
Continue traversing while top <= bottom and left <= right.
while (top <= bottom && left <= right) {
Step 4: Traverse from Left to Right (Top Row)
Iterate from left to right along the top row.

Push elements into result vector.

Move top down (top++) to exclude the processed row.
for (int i = left; i <= right; i++)
    result.push_back(matrix[top][i]);
top++;
Step 5: Traverse from Top to Bottom (Right Column)
Iterate from top to bottom along the right column.

Push elements into result vector.

Move right left (right--) to exclude the processed column.
for (int i = top; i <= bottom; i++)
    result.push_back(matrix[i][right]);
right--;
Step 6: Traverse from Right to Left (Bottom Row)
Only execute if top <= bottom (to prevent duplicate traversal).

Iterate from right to left along the bottom row.

Push elements into result vector.

Move bottom up (bottom--) to exclude the processed row.
if (top <= bottom) {
    for (int i = right; i >= left; i--)
        result.push_back(matrix[bottom][i]);
    bottom--;
}
Step 7: Traverse from Bottom to Top (Left Column)
Only execute if left <= right (to prevent duplicate traversal).

Iterate from bottom to top along the left column.

Push elements into result vector.

Move left right (left++) to exclude the processed column.
if (left <= right) {
    for (int i = bottom; i >= top; i--)
        result.push_back(matrix[i][left]);
    left++;
}
Step 8: Repeat Until Matrix is Fully Traversed
The loop continues until top > bottom or left > right, ensuring that all elements are covered.

Step 9: Return the Result
After exiting the loop, return the result vector containing the spiral order.
return result;
Time & Space Complexity Analysis
Time Complexity: O(m × n) → Each element is visited once.

Space Complexity: O(1) → No extra space is used apart from the result vector.

Dry Run Example
Input:
matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
}
Steps Execution:
Left to Right: → [1, 2, 3]

Top to Bottom: → [6, 9]

Right to Left: → [8, 7]

Bottom to Top: → [4]

Left to Right: → [5]

Output:
1 2 3 6 9 8 7 4 5
Final Notes
Key Concept: Maintain and adjust four boundaries (top, bottom, left, right).

Edge Case Handling: Empty matrix check.

Ensures Efficiency: No duplicate or unnecessary iterations.

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
      vector<int> result;
    
    if (matrix.empty() || matrix[0].empty()) return result;  // Fix: Check for empty matrix
    
    int top = 0, left = 0;
    int bottom = matrix.size() - 1;
    int right = matrix[0].size() - 1;
    
    while (top <= bottom && left <= right) {
        // Left to Right
        for (int i = left; i <= right; i++)
            result.push_back(matrix[top][i]);
        top++;

        // Top to Bottom
        for (int i = top; i <= bottom; i++)
            result.push_back(matrix[i][right]);
        right--;

        // Right to Left
        if (top <= bottom) {
            for (int i = right; i >= left; i--)
                result.push_back(matrix[bottom][i]);
            bottom--;
        }

        // Bottom to Top
        if (left <= right) {
            for (int i = bottom; i >= top; i--)
                result.push_back(matrix[i][left]);
            left++;
        }
    }
    
    return result;  
    }
};
