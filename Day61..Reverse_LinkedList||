Stepwise Approach for reverseBetween Function
The function reverses a portion of a linked list between positions left and right in O(n) time and O(1) space using the in-place reversal method.

Step 1: Handle Edge Cases
If head is NULL, return head (empty list).
If left == right, return head (no need to reverse).
if (!head || left == right) 
    return head;
Step 2: Create a Dummy Node
Create a dummy node before head to handle cases where left == 1 (first node is reversed).
dummy(0, head) initializes dummy with value = 0 and next = head.
ListNode dummy(0, head);
ListNode *prev = &dummy;
Step 3: Move prev to the Node Before left
prev will point to the node just before the sublist that needs reversal.
Loop left - 1 times to position prev correctly.
for (int i = 0; i < left - 1; i++) 
    prev = prev->next;
Example:
Input Linked List:
1 → 2 → 3 → 4 → 5, left = 2, right = 4
After this loop, prev will point to node 1.

Step 4: Initialize tail (First Node of Sublist)
tail = prev->next points to the first node of the sublist that will be reversed.
ListNode* tail = prev->next;
At this stage:
prev  →  1 → 2 → 3 → 4 → 5
              ↑  (tail starts here)
Step 5: Reverse the Sublist
We iterate right - left times to reverse the sublist using pointer swaps.
Each iteration moves tail->next to the front of the sublist.
for (int i = 0; i < right - left; i++) {
    ListNode* ch = tail->next;  // Node to be moved
    tail->next = ch->next;      // Remove `ch` from current position
    ch->next = prev->next;      // Insert `ch` at the start of sublist
    prev->next = ch;            // Update prev to point to new front node
}
Step-by-Step Reversal Process
Before Reversal (left = 2, right = 4)
dummy → 1 → 2 → 3 → 4 → 5
              ↑   ↑   ↑
            prev tail  ch
Iteration 1
Move ch = 3 in front of tail.
Update pointers:
dummy → 1 → 3 → 2 → 4 → 5
              ↑   ↑   ↑
            prev  ch  tail
Iteration 2
Move ch = 4 in front of tail.
Update pointers:
dummy → 1 → 4 → 3 → 2 → 5
              ↑   ↑   ↑
            prev  ch  tail
Step 6: Return the Updated Head
Since the dummy node was added before the original head, return dummy.next.

return dummy.next;
Final Linked List After Reversal
For left = 2, right = 4, the linked list changes from:
1 → 2 → 3 → 4 → 5
To:
1 → 4 → 3 → 2 → 5
Time and Space Complexity
Approach	Time Complexity	Space Complexity
In-place Reversal	O(n)	O(1)


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if(!head||left==right)
        return head;
        ListNode dummy(0,head);
        ListNode *prev=&dummy;
        for(int i=0;i<left-1;i++)
        prev=prev->next;
        ListNode* tail=prev->next;
        for(int i=0;i<right-left;i++)
        {
            ListNode* ch=tail->next;
            tail->next=ch->next;
            ch->next=prev->next;
            prev->next=ch;
        }
        return dummy.next;
    }
};
