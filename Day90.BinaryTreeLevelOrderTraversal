Stepwise Approach for Level Order Traversal of a Binary Tree
The goal of this function is to perform level-order traversal (also known as BFS) on a binary tree and return a list of node values level by level.

Step 1: Handle the Base Case
vector<vector<int>> result;
if (!root) return result;
If the root is NULL, return an empty result because there is no tree to traverse.

Step 2: Initialize a Queue for BFS
queue<TreeNode*> q;
q.push(root);
Why use a queue?

The queue follows a FIFO (First In First Out) order, which helps in processing nodes level by level.

Initially, push the root node into the queue.

Step 3: Traverse the Tree Level by Level
while (!q.empty()) {
Loop until the queue is empty, meaning all levels are processed.

Step 4: Process Each Level
int size = q.size();
vector<int> level;
size = q.size(); → Get the number of nodes in the current level.

vector<int> level; → Create a temporary vector to store values of the current level.

Step 5: Process All Nodes in the Current Level
for (int i = 0; i < size; i++) {
    TreeNode* node = q.front();  // Get the front node
    q.pop();  // Remove it from the queue
    level.push_back(node->val);  // Store its value

    if (node->left) q.push(node->left);  // Add left child if exists
    if (node->right) q.push(node->right);  // Add right child if exists
}
Process all nodes at the current level:

Extract the front node from the queue.

Store its value in the level vector.

Push its left and right children (if they exist) into the queue.

Step 6: Store the Current Level in the Result
result.push_back(level);
Once all nodes of the current level are processed, add the level vector to result.

Step 7: Return the Final Result
return result;
After processing all levels, return the result, which contains all levels of the tree.

Example Walkthrough
Input Tree
        1
       / \
      2   3
     / \   \
    4   5   6
Step-by-Step Traversal
Queue Status	Nodes Processed	Level Added to result
[1]	1 → Push 2,3	[ [1] ]
[2,3]	2,3 → Push 4,5,6	[ [1], [2,3] ]
[4,5,6]	4,5,6 → No more children	[ [1], [2,3], [4,5,6] ]
[] (empty)	Traversal Ends	Final Output
Final Output
[
  [1],
  [2, 3],
  [4, 5, 6]
]
Time Complexity
O(N) → We visit each node exactly once.

O(N) → We store all nodes in result and the queue.

Final Thoughts
✅ Uses BFS (Queue-based level-order traversal)
✅ Processes all levels efficiently
✅ Handles empty trees properly



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> result;
        if (!root) return result;

        queue<TreeNode*> q;
        q.push(root);
        
        while (!q.empty()) {
            int size = q.size();
            vector<int> level;
            for (int i = 0; i < size; i++) {
                TreeNode* node = q.front();
                q.pop();
                level.push_back(node->val);
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }
            result.push_back(level);
        }
        
        return result;
    }
};
