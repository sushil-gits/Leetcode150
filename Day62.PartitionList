Stepwise Approach to Partition a Linked List
This problem requires partitioning a linked list such that all nodes with values less than x come before nodes with values greater than or equal to x, while preserving the original relative order of nodes.

Step 1: Understanding the Problem
Given a singly linked list and a value x, rearrange the nodes such that:
Nodes with values less than x appear before nodes with values greater than or equal to x.
The relative order of nodes should remain the same.
Example
Input
head = [1 â†’ 4 â†’ 3 â†’ 2 â†’ 5 â†’ 2], x = 3
Output
[1 â†’ 2 â†’ 2 â†’ 4 â†’ 3 â†’ 5]
Explanation
Nodes less than 3 â†’ [1, 2, 2]
Nodes greater than or equal to 3 â†’ [4, 3, 5]
The output maintains the original order within each group.
Step 2: Approach
Create Two Dummy Nodes

before â†’ Stores nodes less than x.
after â†’ Stores nodes greater than or equal to x.
Use Two Pointers

before_curr â†’ Tracks the last node in before list.
after_curr â†’ Tracks the last node in after list.
Traverse the List

If head->val < x, attach the node to before_curr.
Else, attach it to after_curr.
Merge Both Lists

Attach before_curr->next = after.next to connect the partitions.
Mark after_curr->next = NULL to prevent cycles.
Return the New Head

The new head is before.next.
Step 3: Breaking Down the Code
Corrected Code with Fixes
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};

ListNode* partition(ListNode* head, int x) {
    ListNode before(0), after(0);  // Dummy nodes
    ListNode *before_curr = &before, *after_curr = &after;

    // Step 1: Traverse the list
    while (head) {
        if (head->val < x) {
            before_curr->next = head;  // Add to 'before' list
            before_curr = head;        // Move pointer
        } else {
            after_curr->next = head;   // Add to 'after' list
            after_curr = head;         // Move pointer
        }
        head = head->next;  // Move to the next node
    }

    // Step 2: Merge the two lists
    after_curr->next = NULL;  // Mark end of 'after' list
    before_curr->next = after.next;  // Connect 'before' list to 'after' list

    return before.next;  // Return new head
}
Step 4: Handling Edge Cases
Edge Case	Input	Expected Output	Explanation
Empty List	head = NULL, x = 3	NULL	No nodes to partition.
All Nodes < x	head = [1, 2], x = 3	[1 â†’ 2]	All nodes are already in order.
All Nodes â‰¥ x	head = [3, 4, 5], x = 3	[3 â†’ 4 â†’ 5]	List remains unchanged.
Mixed Values	head = [4, 1, 2, 3, 5], x = 3	[1 â†’ 2 â†’ 4 â†’ 3 â†’ 5]	Nodes < x come first.
Step 5: Complexity Analysis
Complexity	Explanation
Time Complexity: O(N)	We traverse the list once (O(N)) and rearrange pointers.
Space Complexity: O(1)	No extra space used apart from a few pointers.
Final Summary
âœ… Uses dummy nodes to manage partitions efficiently
âœ… Maintains original relative order
âœ… Efficient O(N) solution ðŸš€


**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        ListNode before(0),after(0);
        ListNode *before_curr=&before;
        ListNode *after_curr=&after;
        while(head)
        {
            if(head->val<x)
            {
                before_curr->next=head;
                before_curr=head;
            }
            else
            {
                after_curr->next=head;
                after_curr=head;
            }
            head=head->next;
        }
        after_curr->next=NULL;
        before_curr->next=after.next;
        return
    }
};
