Stepwise Explanation of the Code
This code is implementing the Right Side View of a binary tree using Level Order Traversal (BFS). The idea is to collect the rightmost node of each level in the tree.

Step 1: Initialize Result Vector
vector<int> result;
This will store the rightmost nodes from each level.

Step 2: Handle Edge Case (Empty Tree)
if (!root) return result;
If the tree is empty (root == NULL), return an empty vector.

Step 3: Initialize Queue for Level Order Traversal
queue<TreeNode*> q;
q.push(root);
A queue (q) is used for Breadth-First Search (BFS).

Push the root node into the queue.

Step 4: Start Level Order Traversal
while (!q.empty()) {
Continue until all nodes are processed.

Step 5: Process Each Level
int levelSize = q.size();
Get the number of nodes at the current level.

Step 5.1: Iterate Over All Nodes in the Current Level
for (int i = 0; i < levelSize; ++i) {
Process each node in the current level.

Step 6: Extract Front Node from Queue
cpp
Copy
Edit
TreeNode* node = q.front();
q.pop();
Take the first node from the queue and remove it.

Step 7: Store the Rightmost Node of the Current Level
if (i == levelSize - 1) result.push_back(node->val);
If i is the last index in the current level, store this node's value in result.

Step 8: Add Child Nodes to Queue
if (node->left) q.push(node->left);
if (node->right) q.push(node->right);
If node has a left child, push it to the queue.

If node has a right child, push it to the queue.

Step 9: Return the Result
cpp
Copy
Edit
return result;
The result vector now contains the rightmost node of each level.

Complexity Analysis
Time Complexity: 
ùëÇ
(
ùëõ
)
O(n) (Each node is processed once)

Space Complexity: 
ùëÇ
(
ùëõ
)
O(n) (In the worst case, the queue stores all nodes in a level)

Example Walkthrough
Input:
        1
       / \
      2   3
       \    \
        5    4
Step-by-Step Execution:
Level	Nodes in Queue	Rightmost Node
1	[1]	1
2	[2, 3]	3
3	[5, 4]	4
Output:
[1, 3, 4]
Key Takeaways
‚úÖ Uses BFS to traverse level by level.
‚úÖ Stores rightmost node of each level in result.
‚úÖ Efficient 
ùëÇ
(
ùëõ
)
O(n) solution for finding the right-side view of a binary tree. üöÄ





/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> result;
        if (!root) return result;

        queue<TreeNode*> q;
        q.push(root);

        while (!q.empty()) {
            int levelSize = q.size();
            for (int i = 0; i < levelSize; ++i) {
                TreeNode* node = q.front();
                q.pop();

                if (i == levelSize - 1) result.push_back(node->val);
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }
        }

        return result;
    }
};


